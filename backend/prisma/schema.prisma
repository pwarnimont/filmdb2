generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FilmFormat {
  format35mm @map("35mm")
  format6x6 @map("6x6")
  format6x4_5 @map("6x4_5")
  format6x7 @map("6x7")
  format6x9 @map("6x9")
  other
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstName    String
  lastName     String
  passwordHash String
  role         Role     @default(USER)
  isActive     Boolean  @default(true)
  failedLoginAttempts Int      @default(0)
  lockoutUntil        DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  filmRolls    FilmRoll[]
}

model AppSettings {
  id                String   @id @default(uuid())
  allowRegistration Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FilmRoll {
  id            String       @id @default(uuid())
  filmId        String
  filmName      String
  boxIso        Int
  shotIso       Int?
  dateShot      DateTime?
  cameraName    String?
  filmFormat    FilmFormat
  exposures     Int
  isDeveloped   Boolean     @default(false)
  isScanned     Boolean     @default(false)
  scanFolder    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  development   Development?
  prints        Print[]
}

model Development {
  id               String    @id @default(uuid())
  filmRollId       String    @unique
  developer        String
  temperatureC     Decimal   @db.Decimal(4, 1)
  dilution         String
  timeSeconds      Int
  dateDeveloped    DateTime
  agitationScheme  String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  filmRoll         FilmRoll  @relation(fields: [filmRollId], references: [id])
}

model Print {
  id                     String   @id @default(uuid())
  filmRollId             String
  frameNumber            Int
  paperType              String
  paperSize              String
  paperManufacturer      String
  developmentTimeSeconds Int
  fixingTimeSeconds      Int
  washingTimeSeconds     Int
  splitGradeInstructions String?
  splitGradeSteps        Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  filmRoll               FilmRoll @relation(fields: [filmRollId], references: [id], onDelete: Cascade)
}
